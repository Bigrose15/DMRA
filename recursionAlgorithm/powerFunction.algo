ALGORITHM Power(base, exponent)
  INPUT: base = 7, an integer
          exponent = 3, an integer
  OUTPUT: base raised to the power of exponent

  VAR result, an integer

  IF exponent == 0 THEN
    RETURN result := 1
  ELSE IF exponent > 0 THEN
    RETURN result := base * Power(base, exponent - 1)
  ELSE
    RETURN result := 1 / Power(base, -exponent)
  END IF

END ALGORITHM


//Alternative it can aa be written as: a fuction called Power that takes two arguments base and exponent
ALGORITHM Power(base, exponent)
  INPUT: base, an integer
          exponent, an integer
  OUTPUT: base raised to the power of exponent

  VAR result, an integer

  IF exponent == 0 THEN
    RETURN result := 1
  ELSE IF exponent > 0 THEN
    RETURN result := base * Power(base, exponent - 1)
  ELSE
    RETURN result := 1 / Power(base, -exponent)
  END IF

END ALGORITHM


Power(7,Â 3)


//explaination
/*Here's the step-by-step calculation:


1. power(7, 3) calls power(7, 2)
2. power(7, 2) calls power(7, 1)
3. power(7, 1) calls power(7, 0)
4. power(7, 0) returns 1 (base case)

Now, the recursive calls return:


1. power(7, 1) returns 7 * 1 = 7
2. power(7, 2) returns 7 * 7 = 49
3. power(7, 3) returns 7 * 49 = 343
*/
//The power function calculates the power of a number using recursion. It takes two arguments: base and exponent. If the exponent is 0, the function returns 1 (base case). Otherwise, it multiplies the base by the result of calling the power function recursively with the base and exponent - 1. This process continues until the exponent reaches 0, at which point the function returns 1. The function then returns the final result of multiplying the base by the recursive calls. In this example, power(7, 3) calculates 7^3, which is 343.

//The time complexity of the power function is O(n), where n is the value of the exponent. This is because the function makes n recursive calls, each reducing the exponent by 1 until it reaches 0. Therefore, the time complexity is linear with respect to the exponent value.





































// // Power Function
// FUNCTION power(base: INTEGER, exponent: INTEGER): INTEGER
// VAR
//     result: INTEGER
// BEGIN
//     IF exponent = 0 THEN
//         RETURN result := 1
//     ELSE IF exponent > 0 THEN
//         RETURN result := base * power(base, exponent - 1)
//     ELSE
//         RETURN result := 1 / power(base, -exponent) // Handling negative exponents if needed
//     END_IF

//     RETURN result
// END